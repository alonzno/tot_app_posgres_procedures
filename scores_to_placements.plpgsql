DECLARE
	this_event_type event_type;
	this_bracket_depth smallint;
	this_top_type top_type;
	
	this_row_result scores;
	this_row_array integer[];
	
	this_placements_array smallint[16];
	this_team_size smallint;
	
	this_seen_elements boolean[16];
	this_extreme integer;
	this_extreme_last integer;
	this_extreme_index integer;
	this_curr_place integer;
	this_is_empty boolean;
	
BEGIN
	
	-- GET SCORES
	SELECT * FROM scores INTO this_row_result WHERE scores.event_id = event_id_param;
	
	-- HANDLE IF ROW DOESN'T EXIST
	IF this_row_result IS NULL THEN
		RAISE WARNING 'There is no row in scores for event_id: %', event_id_param;
		RETURN;
	END IF;
	
	-- CONVERT ROW TO ARRAY
	this_row_array = array[this_row_result.score_id_0,
						  	this_row_result.score_id_1,
						  	this_row_result.score_id_2,
						 	this_row_result.score_id_3,
						  	this_row_result.score_id_4,
						  	this_row_result.score_id_5,
						  	this_row_result.score_id_6,
						  	this_row_result.score_id_7,
						  	this_row_result.score_id_8,
						  	this_row_result.score_id_9,
						  	this_row_result.score_id_10,
						  	this_row_result.score_id_11,
						  	this_row_result.score_id_12,
						  	this_row_result.score_id_13,
						  	this_row_result.score_id_14,
						  	this_row_result.score_id_15];

	-- GET EVENT TYPE
	SELECT event_type, top_type, bracket_depth FROM events INTO this_event_type, this_top_type, this_bracket_depth WHERE events.id = event_id_param;
	
	-- DETERMINE IS ALL SCORES ARE IN
	SELECT bool_or(a is NULL) FROM unnest(this_row_array) s(a) INTO this_is_empty;
	
	IF this_is_empty THEN
		RAISE WARNING 'Scores are not all in for event: %', event_id_param;
		RETURN;
	END IF;
	
	-- DETERMINE IF BRACKET HAS ALL SCORES IN
	IF this_event_type = 'BRACKET' THEN
		CASE this_bracket_depth
			WHEN 4 THEN
				IF NOT this_row_array @> CAST(array[1111, 1101] as integer[]) THEN
					RAISE WARNING 'Bracket not completed for event: %', event_id_param;
					RETURN;
				END IF;
			WHEN 3 THEN
				IF NOT this_row_array @> CAST(array[111, 101] as integer[]) THEN
					RAISE WARNING 'Bracket not completed for event: %', event_id_param;
					RETURN;
				END IF;
			WHEN 2 THEN
				IF NOT this_row_array @> CAST(array[11] as integer[]) THEN
					RAISE WARNING 'Bracket not completed for event: %', event_id_param;
					RETURN;
				END IF;
			WHEN 1 THEN
				IF NOT this_row_array @> CAST(array[1] as integer[]) THEN
					RAISE WARNING 'Bracket not completed for event: %', event_id_param;
					RETURN;
				END IF;
			ELSE
		END CASE;
	END IF;
	
	-- DETERMINE IF TOP HAS ALL SCORES IN
	IF this_event_type = 'TOP' THEN
		CASE this_top_type
			WHEN 'TYPE_A' THEN
				IF NOT this_row_array && CAST(array[88,87,86,85,78,77,76,75,68,67,66,65,58,57,56,55,48,47,46,45,38,37,36,35,28,27,26,25,18,17,16,15] as integer[]) THEN
					RAISE WARNING 'Bracket not completed for event: %', event_id_param;
					RETURN;
				END IF;
			WHEN 'TYPE_B' THEN
				IF NOT this_row_array @> CAST(array[44,34,24,14] as integer[]) THEN
					RAISE WARNING 'Bracket not completed for event: %', event_id_param;
					RETURN;
				END IF;
			WHEN 'TYPE_C' THEN
				IF NOT this_row_array @> CAST(array[44,34,24,14] as integer[]) THEN
					RAISE WARNING 'Bracket not completed for event: %', event_id_param;
					RETURN;
				END IF;
			ELSE
		END CASE;
	END IF;
		
	RAISE NOTICE '%', this_row_array;	--	DEBUG

	-- GET TEAM SIZE
	SELECT team_size FROM events INTO this_team_size WHERE events.id = event_id_param;

	-- HANDLE DIFFERENT KINDS OF EVENTS
	CASE this_event_type
		WHEN 'MIN' THEN
			this_extreme = 2147483647;
			this_extreme_last = -2;
			this_extreme_index = -1;
			this_curr_place = 0;
			this_seen_elements = array_fill(FALSE, array[16]);
			
			FOR i IN 1..16 LOOP
				RAISE LOG 'Run: %', i;
				FOR j IN 1..16 LOOP
					--	FIND SMALLEST ELEMENT THAT HAS NOT BEEN SEEN
					IF NOT this_seen_elements[j] AND this_extreme > this_row_array[j] THEN
						this_extreme = this_row_array[j];
						this_extreme_index = j;
						RAISE DEBUG '% % % %', i, j, this_extreme, this_extreme_index;
					END IF;
				END LOOP;
				IF this_extreme != this_extreme_last THEN
					IF this_team_size = 1 THEN
						this_curr_place = i;
					ELSE
						-- this_curr_place = (i+1) / this_team_size;
						this_curr_place = ((i-1) / this_team_size) + 1;
					END IF;
				END IF;
				
				this_extreme_last = this_extreme;
				this_extreme = 2147483647;
				this_placements_array[this_extreme_index] = this_curr_place;
				this_seen_elements[this_extreme_index] = TRUE;
			END LOOP;
			
			RAISE DEBUG '%', this_placements_array;
			
		WHEN 'MAX' THEN
			this_extreme = -1;
			this_extreme_last = -2;
			this_extreme_index = -1;
			this_curr_place = 0;
			this_seen_elements = array_fill(FALSE, array[16]);
			
			FOR i IN 1..16 LOOP
				RAISE DEBUG 'Run: %', i;
				FOR j IN 1..16 LOOP
					--	FIND LARGEST ELEMENT THAT HAS NOT BEEN SEEN
					IF NOT this_seen_elements[j] AND this_extreme < this_row_array[j] THEN
						this_extreme = this_row_array[j];
						this_extreme_index = j;
						RAISE DEBUG '% % % %', i, j, this_extreme, this_extreme_index;
					END IF;
				END LOOP;
				IF this_extreme != this_extreme_last THEN
					IF this_team_size = 1 THEN
						this_curr_place = i;
					ELSE
						--this_curr_place = (i+1) / this_team_size;
						this_curr_place = ((i-1) / this_team_size) + 1;
					END IF;
				END IF;
				
				this_extreme_last = this_extreme;
				this_extreme = -1;
				this_placements_array[this_extreme_index] = this_curr_place;
				this_seen_elements[this_extreme_index] = TRUE;
			END LOOP;
			
			RAISE DEBUG '%', this_placements_array;
			
		WHEN 'TOP', 'BRACKET' THEN
			this_extreme = -1;
			this_extreme_last = -2;
			this_extreme_index = -1;
			this_curr_place = 1;
			this_seen_elements = array_fill(FALSE, array[16]);
			
			FOR i IN 1..16 LOOP
				RAISE DEBUG 'Run: %', i;
				FOR j IN 1..16 LOOP
					IF NOT this_seen_elements[j] AND this_extreme < this_row_array[j] THEN
						this_extreme = this_row_array[j];
						this_extreme_index = j;
						RAISE DEBUG '% % % %', i, j, this_extreme, this_extreme_index;
					END IF;
				END LOOP;
				IF this_extreme != this_extreme_last THEN
					this_curr_place = i;
				END IF;
				
				this_extreme_last = this_extreme;
				this_extreme = -1;
				this_placements_array[this_extreme_index] = this_curr_place;
				this_seen_elements[this_extreme_index] = TRUE;
			END LOOP;
			
			RAISE DEBUG '%', this_placements_array;
			
		ELSE
			RAISE WARNING 'Invalid event_type: %', this_event_type;
			RETURN;
	END CASE;
	UPDATE placements SET
		place_id_0 = this_placements_array[1],
		place_id_1 = this_placements_array[2],
		place_id_2 = this_placements_array[3],
		place_id_3 = this_placements_array[4],
		place_id_4 = this_placements_array[5],
		place_id_5 = this_placements_array[6],
		place_id_6 = this_placements_array[7],
		place_id_7 = this_placements_array[8],
		place_id_8 = this_placements_array[9],
		place_id_9 = this_placements_array[10],
		place_id_10 = this_placements_array[11],
		place_id_11 = this_placements_array[12],
		place_id_12 = this_placements_array[13],
		place_id_13 = this_placements_array[14],
		place_id_14 = this_placements_array[15],
		place_id_15 = this_placements_array[16]
	WHERE
		event_id = event_id_param;
	
END;
